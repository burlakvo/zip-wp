#!/usr/bin/env bash

# Version 1.0.0
#
# Requiring: zip

set +vx -o pipefail
[[ $- = *i* ]] && echo "Don't source this script!" && exit 1

## Variable definitions


_version='1.0.0'     # Script version

ar_ignore=(
	.git/
	.idea/           # JetBrains IDE settings folder
	.vscode/         # VS Code settings folder
	.DS_Store        # Generated by MacOS
	Thumbs.db        # Generated by Windows
	sftp-config.json # SublimeText SFTP settings file
	.gitignore
	.editorconfig
	*.md
	*.log
)

RED='\033[0;31m'
GREEN='\033[0;32m'
BOLD='\033[1m'
NF='\033[0m'         # No format

## Function definitions

# $@: command line parameters
main() {
	# Check is zip command exists
	if ! type zip > /dev/null; then
		panic "zip command not found. You should install it first"
		exit
	fi

	version=''       # Archive version
	is_test_output=false
	is_process_hidden=false
	custom_exclude=false
	force_include=false

	while [ $# -gt 0 ]; do
		case $1 in
			--version)
				echo $_version
				exit
				;;
			-h|--help)
				usage
				exit
				;;
			-v)
				version="-v$2"
				shift
				;;
			--exclude)
				custom_exclude=$2
				shift
				;;
			--include)
				force_include=$2
				shift
				;;
			--include-hidden)
				is_process_hidden=true
				;;
			-t)
				is_test_output=true
				;;
			-*)
				panic 'Unrecognized option'
				usage
				exit
				;;
			*)
				if [ -n $1 ]; then version="-v$1"; fi
				;;
		esac
		shift
	done

	# Exclude custom files
	if [ -n $custom_exclude ]; then
		ar_ignore+=($custom_exclude)
	fi

	# Include excluded by default files
	if [ -n $force_include ]; then
		for include in $force_include; do
			ar_ignore=("${ar_ignore[@]/$include}")
		done
	fi

	folder=${PWD##*/}
	archive="$folder${version}.zip"

	# Go level up because we need plugin/theme directory in archive, not only its content
	cd ../

	# Remove archive if it already exists
	if [ -e $archive ]; then
		rm $archive
	fi

	if $is_process_hidden; then shopt -s dotglob; fi

	through_dir $folder

	if $is_process_hidden; then shopt -u dotglob; fi

	# Go back to plugin/theme directory
	cd $folder

	if ! $is_test_output; then echo "zip $archive created"; fi
}

# $1: folder to walk through
through_dir() {
	for unit in $1/*; do
		if [ ! -e $unit ]; then
			panic "path `pwd`/$unit not exists"
			continue
		fi

		unit_name=${unit##*/}

		if [ -d $unit ]; then
			unit_name+=/

		fi

		if ! is_accept $unit_name; then
			if $is_test_output; then echo -e ${RED}$unit${NF}; fi
			continue
		fi

		if $is_test_output; then echo -e ${GREEN}$unit${NF}; fi
		if ! $is_test_output; then zip -q $archive $unit; fi

		if [ -d $unit ] && [ "$(ls -A $unit)" ]; then
			through_dir $unit
		fi
	done
}

# $1: file name to check it in ignore list
is_accept() {
	for pattern in "${ar_ignore[@]}"; do
		if [[ $1 == $pattern ]]; then
			false
			return
		fi
	done

	true
}

# $1: error messages
panic() {
	echo -e "\n${RED}Error:${NF} $1\n"
}

usage() {
	cat <<HEREUSAGE

$(echo -e "${BOLD}DESCRIPTION:${NF}")
	Create plugin or theme archive with name of current folder

$(echo -e "${BOLD}USAGE:${NF}")
	$(basename "$0") [--version] [--help] [-v <version>] [--exclude <list>]
	[--include] [--include-hidden] [-t] <version>

$(echo -e "${BOLD}OPTIONS:${NF}")
	--version
		Prints the script version

	-h, --help
		Prints the synopsis and a list of the most commonly used commands

	-v <version>, <version>
		Add version value to archive name

			$(basename "$0") -v 1.0.0
			$(basename "$0") 1.0.0

	--exclude <list>
		Add files/directories to ignore list and NOT include them/their content
		to archive

			$(basename "$0") --exclude "test/ *.txt"

	--include
		Include excluded by default files and/or folders. List of ignored files
		(list not include hidden files, see below):

			Thumbs.db        # Generated by Windows
			sftp-config.json # SublimeText SFTP settings file
			*.md
			*.log

	--include-hidden
		Include hidden files (w/ dot at the beginning) except this
		(if not included manually):

			.git/
			.idea/           # JetBrains IDE settings folder
			.vscode/         # VS Code settings folder
			.DS_Store        # Generated by MacOS
			.gitignore
			.editorconfig

	-t
		Test output. Prints files path and name and not create archive. Green lines - files and
		directories that will be added. Red lines - will not added.
HEREUSAGE
}

main "$@"
exit